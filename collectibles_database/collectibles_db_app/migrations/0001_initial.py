# Generated by Django 4.2.2 on 2023-07-09 16:03

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GradationSystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
            ],
            options={
                'verbose_name': 'gradation_system',
                'verbose_name_plural': 'gradation_systems',
            },
        ),
        migrations.CreateModel(
            name='Value',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, max_length=50, null=True, verbose_name='value')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('gradation_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='values', to='collectibles_db_app.gradationsystem', verbose_name='gradation_system')),
            ],
            options={
                'verbose_name': 'value',
                'verbose_name_plural': 'values',
            },
        ),
        migrations.CreateModel(
            name='CollectibleItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.CharField(max_length=100, verbose_name='country')),
                ('currency', models.CharField(blank=True, max_length=100, null=True, verbose_name='currency')),
                ('release_year', models.IntegerField(verbose_name='release_year')),
                ('circulation', models.IntegerField(blank=True, null=True, verbose_name='circulation')),
                ('item_type', models.PositiveSmallIntegerField(choices=[(1, 'Circulation Coins'), (2, 'Banknotes'), (3, 'Commemorative Coins'), (4, 'Circulating Commemoratives'), (5, 'Collector Coins'), (6, 'Bullion Coins'), (7, 'Medals'), (8, 'Other')], db_index=True, verbose_name='item_type')),
                ('denomination', models.FloatField(blank=True, null=True, verbose_name='denomination')),
                ('quantity', models.IntegerField(verbose_name='quantity')),
                ('description', models.CharField(blank=True, max_length=3000, null=True, verbose_name='description')),
                ('obverse_side', models.ImageField(blank=True, null=True, upload_to='collectibles/obverse_side', verbose_name='obverse_side')),
                ('reverse_side', models.ImageField(blank=True, null=True, upload_to='collectibles/reverse_side', verbose_name='reverse_side')),
                ('register_date', models.DateTimeField(auto_now_add=True, verbose_name='register_date')),
                ('update_date', models.DateTimeField(blank=True, null=True, verbose_name='update date')),
                ('condition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='collectible_items', to='collectibles_db_app.gradationsystem', verbose_name='condition')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collectible_items', to=settings.AUTH_USER_MODEL, verbose_name='user')),
                ('value', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='collectible_items', to='collectibles_db_app.value', verbose_name='value')),
            ],
            options={
                'verbose_name': 'collectible_item',
                'verbose_name_plural': 'collectible_items',
            },
        ),
    ]
